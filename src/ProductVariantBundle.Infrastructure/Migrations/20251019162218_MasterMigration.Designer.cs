// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductVariantBundle.Infrastructure.Data;

#nullable disable

namespace ProductVariantBundle.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019162218_MasterMigration")]
    partial class MasterMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.BatchOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int>("FailureCount")
                        .HasColumnType("integer")
                        .HasColumnName("failure_count");

                    b.Property<string>("IdempotencyKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("idempotency_key");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operation_type");

                    b.Property<JsonDocument>("ResultData")
                        .HasColumnType("jsonb")
                        .HasColumnName("result_data");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("integer")
                        .HasColumnName("success_count");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer")
                        .HasColumnName("total_items");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_batch_operations_expires_at");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasDatabaseName("ix_batch_operations_idempotency_key");

                    b.HasIndex("OperationType")
                        .HasDatabaseName("ix_batch_operations_operation_type");

                    b.ToTable("BatchOperations", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.BundleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellableItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("SellableItemId");

                    b.HasIndex("BundleId", "SellableItemId")
                        .IsUnique()
                        .HasDatabaseName("uk_bundle_sellable_item");

                    b.ToTable("BundleItems", null, t =>
                        {
                            t.HasCheckConstraint("ck_quantity_positive", "quantity > 0");
                        });
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.InventoryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("OnHand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Reserved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("SellableItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("SellableItemId", "WarehouseId")
                        .IsUnique()
                        .HasDatabaseName("uk_inventory_sellable_warehouse");

                    b.ToTable("InventoryRecords", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("idx_bundle_metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.ToTable("ProductBundles", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonDocument>("Attributes")
                        .HasColumnType("jsonb");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Attributes")
                        .HasDatabaseName("idx_product_master_attributes");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Attributes"), "gin");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("uk_product_master_slug");

                    b.ToTable("ProductMasters", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonDocument>("Attributes")
                        .HasColumnType("jsonb");

                    b.Property<string>("CombinationKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductMasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Attributes")
                        .HasDatabaseName("idx_product_variant_attributes");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Attributes"), "gin");

                    b.HasIndex("ProductMasterId", "CombinationKey")
                        .IsUnique()
                        .HasDatabaseName("uk_variant_combination");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.SellableItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BundleId")
                        .IsUnique();

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("uk_sellable_item_sku");

                    b.HasIndex("VariantId")
                        .IsUnique();

                    b.ToTable("SellableItems", null, t =>
                        {
                            t.HasCheckConstraint("ck_sellable_item_one_of", "(variant_id IS NOT NULL AND bundle_id IS NULL) OR (variant_id IS NULL AND bundle_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.VariantOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ProductMasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ProductMasterId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("uk_variant_option_slug_per_product");

                    b.ToTable("VariantOptions", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.VariantOptionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("VariantOptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("VariantOptionId", "Value")
                        .IsUnique()
                        .HasDatabaseName("uk_option_value_per_option");

                    b.ToTable("VariantOptionValues", (string)null);
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("uk_warehouse_code");

                    b.ToTable("Warehouses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Address = "",
                            Code = "MAIN",
                            CreatedAt = new DateTime(2025, 10, 19, 16, 22, 17, 645, DateTimeKind.Utc).AddTicks(7281),
                            IsDefault = false,
                            Name = "Main Warehouse",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 19, 16, 22, 17, 645, DateTimeKind.Utc).AddTicks(7282)
                        });
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.BundleItem", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.ProductBundle", "Bundle")
                        .WithMany("Items")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductVariantBundle.Core.Entities.SellableItem", "SellableItem")
                        .WithMany("BundleItems")
                        .HasForeignKey("SellableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("SellableItem");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.InventoryRecord", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.SellableItem", "SellableItem")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("SellableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductVariantBundle.Core.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellableItem");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductVariant", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.ProductMaster", "ProductMaster")
                        .WithMany("Variants")
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.SellableItem", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.ProductBundle", "Bundle")
                        .WithOne("SellableItem")
                        .HasForeignKey("ProductVariantBundle.Core.Entities.SellableItem", "BundleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductVariantBundle.Core.Entities.ProductVariant", "Variant")
                        .WithOne("SellableItem")
                        .HasForeignKey("ProductVariantBundle.Core.Entities.SellableItem", "VariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bundle");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.VariantOption", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.VariantOptionValue", b =>
                {
                    b.HasOne("ProductVariantBundle.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductVariantBundle.Core.Entities.VariantOption", "VariantOption")
                        .WithMany("Values")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("VariantOption");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductBundle", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SellableItem");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductMaster", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.ProductVariant", b =>
                {
                    b.Navigation("OptionValues");

                    b.Navigation("SellableItem");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.SellableItem", b =>
                {
                    b.Navigation("BundleItems");

                    b.Navigation("InventoryRecords");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.VariantOption", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("ProductVariantBundle.Core.Entities.Warehouse", b =>
                {
                    b.Navigation("InventoryRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
